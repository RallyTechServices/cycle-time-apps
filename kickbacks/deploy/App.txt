<!DOCTYPE html>
<html>
<head>
    <title>Kickbacks and Deletions</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Tue May 05 2015 21:33:39 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Tue May 05 2015 21:33:39 GMT-0600 (MDT)";
        var CHECKSUM = 15133888370;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.KickbackCalculator', {
    logger: new Rally.technicalservices.Logger(),
    config: {
        kickbackField: 'ScheduleState',
        kickbackPrecedence: [],
        startDate: null,
        endDate: null,
        granularity: "month",
        dateFormat: "M yyyy",
    },

    snapsByOid: {},

    constructor: function (config) {
        this.mergeConfig(config);
    },
    runCalculation: function(snapshots){

        var snaps_by_oid = Rally.technicalservices.Toolbox.aggregateSnapsByOidForModel(snapshots);
        var date_buckets = Rally.technicalservices.Toolbox.getDateBuckets(this.startDate, this.endDate, this.granularity);

        var kickBackData = [];

        Ext.Object.each(snaps_by_oid, function(oid, snaps){
            var kbd = this._getKickbackData(snaps, this.kickbackField, this.kickbackPrecedence);
            if (kbd) {
                kickBackData.push(kbd);
            }
        },this);

        var series = this._getSerieses(kickBackData, date_buckets, this.granularity);

        categories = Rally.technicalservices.Toolbox.formatDateBuckets(date_buckets,this.dateFormat);

       //{formattedID: formattedID, name: name, kickbacks: kickbacks, deletedDate: deleteDate, deletedState: deletedState};
       var kickBackDataExport = [];
        Ext.each(kickBackData, function(kbd){
            var formattedID = kbd.formattedID,
                name = kbd.name,
                type = kbd.type || null;

            if (kbd.deletedDate){
                kickBackDataExport.push({formattedID: formattedID, name: name, type: type, lastState: kbd.deletedState, currentState: null, date: kbd.deletedDate, deletion: true});
            }
            _.each(kbd.kickbacks, function(kb){
                kickBackDataExport.push({formattedID: formattedID, name: name, type: type, lastState: kb.lastState, currentState: kb.currentState, date: kb.date, deletion: false});
            });
        });
        this.kickBackDataExport = kickBackDataExport;

        return {
            series: series,
            categories: categories
        }
    },
    _getKickbackData: function(snaps, field, precedence) {

        //Assumes snaps are stored in ascending date order.
        var previous_state_index = -1;
        var state_index = -1;
        var seconds = null;
        var days = null;
        var include = false;
        console.log('--');

        //First check for deletions
        var deletions = [];
        var kickbacks = [];

        var lastSnap = snaps.slice(-1)[0],
            lastValidTo = Rally.util.DateTime.fromIsoString(lastSnap._ValidTo),
            deleteDate = null,
            deletedState = null,
            formattedID = lastSnap.FormattedID,
            name = lastSnap.Name;

        if (lastValidTo < new Date()) {
            deleteDate = lastValidTo;
            deletedState = lastSnap[field];
        }

        Ext.each(snaps, function (snap) {
            if (snap[field]) {
                previous_state_index = state_index;
                state_index = _.indexOf(precedence, snap[field]);
            }

            if (previous_state_index > state_index) {
                var validFrom = Rally.util.DateTime.fromIsoString(snap._ValidFrom);
                kickbacks.push({
                    date: validFrom,
                    lastState: precedence[previous_state_index],
                    currentState: snap[field]
                })
            }
        }, this);

        if (kickbacks.length > 0 || deleteDate) {
            return {
                formattedID: formattedID,
                name: name,
                kickbacks: kickbacks,
                deletedDate: deleteDate,
                deletedState: deletedState
            };
        }
        return null;

    },
    _getSerieses: function(kickbackData, date_buckets, granularity){
        var kickbackCount =[],
            deletedCount = [];

        for (var i=0; i<date_buckets.length; i++){
            kickbackCount[i] = 0;
            deletedCount[i] = 0;
        }

        Ext.each(kickbackData, function(kdata){
            for (var i=0; i<date_buckets.length; i++){
                if (kdata.deletedDate && kdata.deletedDate >= date_buckets[i] && kdata.deletedDate < Rally.util.DateTime.add(date_buckets[i], granularity, 1)){
                    deletedCount[i]++;
                }
                Ext.each(kdata.kickbacks, function(kb) {
                    if (kb.date >= date_buckets[i] && kb.date < Rally.util.DateTime.add(date_buckets[i], granularity, 1)) {
                        kickbackCount[i]++;
                    }
                });
            }
        });

        return [{
            name: 'Kickbacks',
            data: kickbackCount
        },{
            name: 'Deletions',
            data: deletedCount
        }];
    }
});

Ext.define('Rally.technicalservices.KickbackChart',{
    extend: 'Rally.ui.chart.Chart',
    alias: 'widget.tskickbackchart',

    itemId: 'rally-chart',
    chartData: {},
    loadMask: false,
    chartConfig: {
        chart: {
            type: 'column'
        },
        title: {
            text: 'Kickback Chart'
        },
        xAxis: {
            tickInterval: 1,
            title: {
                text: 'Month'
            }
        },
        yAxis: [
            {
                title: {
                    text: 'Number of Events'
                },
                min: 0
            }
        ],
        plotOptions: {
            series: {
                dataLabels: {
                    format: '{point.y:.1f}'
                },
                marker: {
                    enabled: false
                }
            }
        }
    },
    constructor: function (config) {
        this.callParent(arguments);
        if (config.title){
            this.chartConfig.title = config.title;
        }
    }
});

Ext.override(Rally.ui.picker.FieldPicker, {
    _shouldShowField: function(field) {
        var allowed_attribute_types = ['STATE','STRING'];
        if (field.attributeDefinition){
            var attr_def = field.attributeDefinition;
            //console.log(attr_def.ElementName, attr_def.AttributeType, attr_def);

            var can_use = false;
            if ( attr_def.ElementName == "State" ) {
                can_use = true;
            }

            if ( attr_def.Constrained && Ext.Array.contains(allowed_attribute_types, attr_def.AttributeType) && attr_def.ReadOnly == false ) {
                can_use = true;
            }

            if ( attr_def.ElementName == "c_ProjectManager" ) {
                can_use = false;
            }


            return can_use
        }
        return false;
    }
});

Ext.override(Ext.data.proxy.Server, {
    timeout : 60000,
    processResponse: function(success, operation, request, response, callback, scope) {
        var me = this,
            reader,
            result;

        if (success === true) {
            reader = me.getReader();
            reader.applyDefaults = operation.action === 'read';
            result = reader.read(me.extractResponseData(response));

            if (result.success !== false) {

                Ext.apply(operation, {
                    response: response,
                    resultSet: result
                });

                operation.commitRecords(result.records);
                operation.setCompleted();
                operation.setSuccessful();
            } else {
                operation.setException(result.message);
                me.fireEvent('exception', this, response, operation);
            }
        } else {
            if (response) {
                me.setException(operation, response);
            }
            me.fireEvent('exception', this, response, operation);
        }


        if (typeof callback == 'function') {
            callback.call(scope || me, operation);
        }

        me.afterRequest(request, success);
    },


    setException: function(operation, response) {
        operation.setException({
            status: response.status ,
            statusText: response.statusText
        });
    },


    extractResponseData: Ext.identityFn,


    applyEncoding: function(value) {
        return Ext.encode(value);
    }
});

Ext.define('Rally.technicalservices.Toolbox',{
    singleton: true,
    /**
     * Returns beginnig of month as date for the current time zone
     *
     */
    getBeginningOfMonthAsDate: function(dateInMonth){
        var year = dateInMonth.getFullYear();
        var month = dateInMonth.getMonth();
        return new Date(year,month,1,0,0,0,0);
    },
    getEndOfMonthAsDate: function(dateInMonth){
        var year = dateInMonth.getFullYear();
        var month = dateInMonth.getMonth();
        var day = new Date(year, month+1,0).getDate();
        return new Date(year,month,day,0,0,0,0);
    },
    aggregateSnapsByOid: function(snaps){
        //Return a hash of objects (key=ObjectID) with all snapshots for the object
        var snaps_by_oid = {};
        Ext.each(snaps, function(snap){
            var oid = snap.ObjectID || snap.get('ObjectID');
            if (snaps_by_oid[oid] == undefined){
                snaps_by_oid[oid] = [];
            }
            snaps_by_oid[oid].push(snap);

        });
        return snaps_by_oid;
    },
    getCaseInsensitiveKey: function(obj, inputStr){
        var new_key = inputStr;
        Ext.Object.each(obj, function(key, val){
            if (new_key.toLowerCase() == key.toLowerCase()){
                new_key = key;
            }
        });
        return new_key;

    },
    aggregateSnapsByOidForModel: function(snaps){
        //Return a hash of objects (key=ObjectID) with all snapshots for the object
        var snaps_by_oid = {};
        Ext.each(snaps, function(snap){
            var oid = snap.ObjectID || snap.get('ObjectID');
            if (snaps_by_oid[oid] == undefined){
                snaps_by_oid[oid] = [];
            }
            snaps_by_oid[oid].push(snap.getData());

        });
        return snaps_by_oid;
    },
    getDateBuckets: function(startDate, endDate, granularity){

        var bucketStartDate = Rally.technicalservices.Toolbox.getBeginningOfMonthAsDate(startDate);
        var bucketEndDate = Rally.technicalservices.Toolbox.getEndOfMonthAsDate(endDate);

        var date = bucketStartDate;

        var buckets = [];
        while (date<bucketEndDate && bucketStartDate < bucketEndDate){
            buckets.push(date);
            date = Rally.util.DateTime.add(date,granularity,1);
        }
        return buckets;
    },
    formatDateBuckets: function(buckets, dateFormat){
        var categories = [];
        Ext.each(buckets, function(bucket){
            categories.push(Rally.util.DateTime.format(bucket,dateFormat));
        });
        categories[categories.length-1] += "*";
        return categories;
    }
});

Ext.define('Rally.technicalservices.DropdownFieldCombobox', {
    requires: [],
    extend: 'Rally.ui.combobox.ComboBox',
    alias: 'widget.tsdropdownfieldcombobox',

    config: {
        /**
         * @cfg {Rally.data.Model/String} model (required) The model containing the specified field used to populate the store.
         * Not required if field is an instance of {Rally.data.Field}.
         */
        model: undefined,

        /**
         * @cfg {Object} context An object specifying the scoping settings for retrieving the specified model
         * If not specified the values provided by {Rally.env.Environment#getContext} will be used.
         */
        context: undefined,

        queryMode: 'local',
        editable: false,
        valueField: 'value',
        displayField: 'name',
        lastQuery: ''
    },

    /**
     * @constructor
     */
    constructor: function(config) {

        this.mergeConfig(config);

        this.store = Ext.create('Ext.data.Store', {
            fields: [this.valueField, this.displayField, 'fieldDefinition'],
            data: []
        });

        return this.callParent([this.config]);
    },

    initComponent: function() {

        this.callParent(arguments);

        this.on('afterrender', this._onAfterRender, this);

        if (this.model) {
            if (Ext.isString(this.model)) {
                this._fetchModel();
            } else {
                this._populateStore();
            }
        }
    },

    findRecordByValue: function(value) {
        var record = this.findRecord(this.valueField, value);

        if (!record && (value || '').indexOf('c_') !== 0) {
            record = this.findRecord(this.valueField, 'c_' + value);
        }

        return record;
    },

    _fetchModel: function() {
        Rally.data.ModelFactory.getModel({
            context: this.context,
            type: this.model,
            success: this._onModelRetrieved,
            scope: this
        });
    },

    _onModelRetrieved: function(model) {
        this.model = model;
        this._populateStore();
    },

    _populateStore: function() {
        if (!this.store) {
            return;
        }
        var data = _.sortBy(
            _.map(
                _.filter(this.model.getFields(), this._isNotHidden),
                this._convertFieldToLabelValuePair,
                this
            ),
            'name'
        );

        this.store.loadRawData(data);
        this.setDefaultValue();
        this.onReady();
    },

    _isNotHidden: function(field) {
        console.log('field',field);
        var attributeTypes = ['STRING','STATE','RATING'];

        if (!field.hidden && !field.ReadOnly &&
            field.attributeDefinition && field.attributeDefinition.Constrained &&
            (Ext.Array.contains(attributeTypes, field.attributeDefinition.AttributeType) ||
                field.name == 'State')){
            return true;
        }
        return false;
    },

    _convertFieldToLabelValuePair: function(field) {
        var pair = {
            fieldDefinition: field
        };
        pair[this.valueField] = field.name;
        pair[this.displayField] = field.displayName;
        return pair;
    },

    _onAfterRender: function() {
        this._afterRender = true;
        if (this._storeLoaded) {
            this.fireEvent('ready', this);
        }
    },

    onReady: function() {
        this._storeLoaded = true;
        if (this._afterRender) {
            this.fireEvent('ready', this);
        }
    },

    refreshWithNewModelType: function(type) {
        this.model = type;
        this._fetchModel();
    }
});
Ext.define("kickbacks-app", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'message_box',tpl:'Hello, <tpl>{_refObjectName}</tpl>'},
        {xtype:'container',itemId:'selector_box', layout: {type: 'hbox'}},
        {xtype:'container',itemId:'display_box'},
        {xtype:'tsinfolink'}
    ],

    dateRangeStore: [
        {name: 'Last Complete Month', value: -1},
        {name: 'Last 2 Complete Months', value: -2},
        {name: 'Last 3 Complete Months', value: -3},
        {name: 'Last 6 Complete Months', value: -6},
        {name: 'Last 12 Complete Months', value: -12}
    ],

    defaultDateRange: -3,

   launch: function() {
        this._addComponents();
   },
    _updateApp: function(){

        this._removeChart();
        this._fetchData();
    },
   _fetchData: function(){
      this.setLoading(true);
       var field = this._getField(),
           find = {
           "_TypeHierarchy": {$in: this._getArtifactType()},
           "_ValidTo": {$gte: Rally.util.DateTime.toIsoString(this._getFromDate())}
          },
          previousValueField = '_PreviousValues.' + field,
          fetch =  ['FormattedID','Name',field, previousValueField, 'Owner','_ValidFrom','_ValidTo','_TypeHierarchy'];

       if (this.getContext().getProjectScopeDown()){
           find["_ProjectHierarchy"] = this.getContext().getProject().ObjectID;
       } else {
           find["Project"] = this.getContext().getProject().ObjectID;
       }

       var hydrate = ["_TypeHierarchy","Owner"];
       if (field == 'ScheduleState'){
           hydrate.push(field);
       }

       var kb_store = Ext.create('Rally.data.lookback.SnapshotStore',{
           findConfig: find,
           fetch: fetch,
           hydrate: hydrate,
           removeUnauthorizedSnapshots: true
       });

       kb_store.load({
            scope: this,
            callback: this._kickbackStoreLoaded
       });
   },
   _kickbackStoreLoaded: function(records, operation, success) {
       this.logger.log('_kickbackStoreLoaded',records,operation,success);
       this.setLoading(false);
       if (!success){
           var msg = 'Failed to load data';
           if (operation.error && operation.error.errors){
               msg += ': ' + operation.error.errors[0];
           }
           Rally.ui.notify.Notifier.showError({message: msg});
           return;
       }

       var calc = Ext.create('Rally.technicalservices.KickbackCalculator', {
           kickbackField: this._getField(),
           kickbackPrecedence: this._getFieldPrecedence(),
           startDate: this._getFromDate(),
           endDate: new Date()
       });

       var chart_data = calc.runCalculation(records);
       this._addChart(chart_data);
       this._addGrid(calc.kickBackDataExport);
       //this.exportData = calc.export;
   },
    _addGrid: function(kickbackData){
        var store = Ext.create('Rally.data.custom.Store',{
            data: kickbackData,
            pageSize: kickbackData.length + 1
        });

        this.down('#display_box').add({
            xtype: 'rallygrid',
            itemId: 'rally-grid',
            store: store,
            showPagingToolbar: false,
            columnCfgs: [
                {dataIndex:'formattedID', text:'Formatted ID'},
                {dataIndex:'name', text:'Name', flex: 1},
                {dataIndex: 'lastState', text: 'Last State'},
                {dataIndex:'currentState', text:'Current State'},
                {dataIndex:'date', text: 'Date', flex: 1},
                {dataIndex:'deletion', text:'Deleted'}
            ]
        });

    },
    _removeChart: function(){
        if (this.down('#rally-chart')){
            this.down('#rally-chart').destroy();
            this.down('#rally-grid').destroy();
        }
    },
    _addChart: function(chartData){
       this._removeChart();
       this.down('#display_box').add({
            xtype: 'tskickbackchart',
            itemId: 'rally-chart',
            chartData: chartData,
            title: 'Kickbacks and Deletions'
        });
    },
    _getField: function(){
        return this.down('#cb-field').getValue() || null;
    },
    _getFieldPrecedence: function(){
        var allowedValues =  this.down('#cb-field').getRecord().get('fieldDefinition').attributeDefinition.AllowedValues;
        return _.map(allowedValues, function(av){return av.StringValue});
    },
    _getArtifactType: function(){
        var types = this.down('#cb-artifact-type').getValue() || [];
        if (!_.isArray(types)){
            return [types];
        }
        return types;
    },
    _getFromDate: function(){
        var monthsBack =  this.down('#cb-date-range').getValue();
        return Rally.util.DateTime.add(new Date(),"month",monthsBack);
    },
    _addComponents: function(){

        var date_store = Ext.create('Rally.data.custom.Store', {
            data: this.dateRangeStore
        });
        this.down('#selector_box').add({
            xtype: 'rallycombobox',
            itemId: 'cb-date-range',
            store: date_store,
            displayField: 'name',
            valueField: 'value',
            fieldLabel:  'Date Range',
            labelAlign: 'right',
            labelWidth: 65,
            width: 250,
            value: this.defaultDateRange,
            margin: 10
        });

        var objTypeFilters = [
            {property:'TypePath', operator: 'contains', value: 'PortfolioItem/'},
            {property:'TypePath', value: 'Defect'},
            {property:'TypePath', value: 'HierarchicalRequirement'}
        ];

        this.down('#selector_box').add({
            xtype: 'rallycombobox',
            autoExpand: true,
            itemId: 'cb-artifact-type',
            storeConfig: {
                model: 'TypeDefinition',
                filters: Rally.data.wsapi.Filter.or(objTypeFilters),
                autoLoad: true,
                listeners: {
                    load: function(store){
                        var rec = store.findExactRecord('DisplayName','User Story/Defect');
                        if (rec == null){
                            store.add({
                                TypePath: ['HierarchicalRequirement', 'Defect'],
                                DisplayName: 'User Story/Defect'
                            });
                        }
                    }
                }
            },
            displayField: 'DisplayName',
            valueField: 'TypePath',
            fieldLabel: 'Artifact Type',
            labelAlign: 'right',
            minWidth: 300,
            labelWidth: 100,
            margin: 10,
            listeners: {
                scope: this,
                ready: this._updateFieldPicker,
                select: this._updateFieldPicker
            }
        });
    },
    _updateFieldPicker: function(cb){
        var types = this._getArtifactType();

        if (this.down('#cb-field')){
            this.down('#cb-field').destroy();
            this.down('#bt-update').destroy();
        }

        this.down('#selector_box').add({
            xtype: 'tsdropdownfieldcombobox',
            itemId: 'cb-field',
            margin: 10,
            fieldLabel: 'Field',
            labelAlign: 'right',
            model: types[0]
        });

        this.down('#selector_box').add({
            xtype: 'rallybutton',
            itemId: 'bt-update',
            scope: this,
            text: 'Update',
            margin: 10,
            handler: this._updateApp
        });
    }
});

            
               Rally.launchApp('kickbacks-app', {
                   name: 'Kickbacks and Deletions'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>